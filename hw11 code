import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp
from scipy.linalg import solve

h = 0.1
x = np.arange(0, 1 + h, h)
y0, y1 = 1, 2

# === Shooting Method ===
def shooting_method(x):
    def ode_sys(x, Y):
        y, dy = Y
        d2y = -(x + 1) * dy + 2 * y + (1 - x**2) * np.exp(-x)
        return [dy, d2y]

    def v_eq(s):
        sol = solve_ivp(ode_sys, [x[0], x[-1]], [y0, s], t_eval=[x[-1]])
        return sol.y[0, -1] - y1

    from scipy.optimize import root_scalar
    res = root_scalar(v_eq, method='brentq', bracket=[0, 5])
    s0 = res.root
    sol = solve_ivp(ode_sys, [x[0], x[-1]], [y0, s0], t_eval=x)
    return sol.y[0]

# === Finite Difference Method ===
def finite_difference(x):
    N = len(x) - 2
    h = x[1] - x[0]
    A = np.zeros((N, N))
    b = np.zeros(N)

    for i in range(N):
        xi = x[i + 1]
        pi = -(xi + 1)
        qi = 2
        ri = (1 - xi**2) * np.exp(-xi)

        if i > 0:
            A[i, i - 1] = -1 - h / 2 * pi
        A[i, i] = 2 + h**2 * qi
        if i < N - 1:
            A[i, i + 1] = -1 + h / 2 * pi

        b[i] = -h**2 * ri

    b[0] += (1 + h / 2 * -(x[1] + 1)) * y0
    b[-1] += (1 - h / 2 * -(x[-2] + 1)) * y1

    y_inner = solve(A, b)
    return np.concatenate(([y0], y_inner, [y1]))

# === Variational Method ===
def variational_method(x):
    a, b = 1, 2
    l = 1
    n = 5

    p = lambda x: 1
    q = lambda x: 2
    f = lambda x: (1 - x**2) * np.exp(-x)
    dpdx = lambda x: 0

    phi = lambda i, x: np.sin(i * np.pi * x / l)
    dphi = lambda i, x: (i * np.pi / l) * np.cos(i * np.pi * x / l)

    y1 = a * (1 - x / l) + b * (x / l)
    F = f(x) + (b - a) / l * dpdx(x) - q(x) * y1

    A = np.zeros((n, n))
    b_vec = np.zeros(n)

    for i in range(1, n + 1):
        for j in range(1, n + 1):
            integrand = p(x) * dphi(i, x) * dphi(j, x) + q(x) * phi(i, x) * phi(j, x)
            A[i - 1, j - 1] = np.trapz(integrand, x)
        b_vec[i - 1] = np.trapz(F * phi(i, x), x)

    c = np.linalg.solve(A, b_vec)
    y2 = np.zeros_like(x)
    for i in range(1, n + 1):
        y2 += c[i - 1] * phi(i, x)
    return y1 + y2

# === Compute All Solutions ===
y_shooting = shooting_method(x)
y_fd = finite_difference(x)
y_var = variational_method(x)

# === Print Results in Table Format ===
print(f"{'x':>5} | {'Shooting':>10} | {'Finite Diff':>12} | {'Variational':>12}")
print("-" * 50)
for i in range(len(x)):
    print(f"{x[i]:5.1f} | {y_shooting[i]:10.6f} | {y_fd[i]:12.6f} | {y_var[i]:12.6f}")
